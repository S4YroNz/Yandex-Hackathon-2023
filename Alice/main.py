
from flask import Flask, request, jsonify
from typing import Dict
from wordVariations import VARIATIONS
import logging


app = Flask(__name__)


logging.basicConfig(level=logging.INFO)


class User:
    def __init__(self, id_):
        self.id = id_
        self.isNew = True
        self.inQuiz = False
        self.justFinished = True
        self.requests = 0


sessionStorage: Dict[str, User] = {}


class _nlu:
    def __init__(self, r: dict):
        self.tokens: list[str] = r['tokens']
        self.entities: list[dict] = r['entities']


class _sessionUser:
    def __init__(self, r: dict):
        self.user_id: str = r['user_id']
        self.access_token: str = r.get('access_token', None)

    def todict(self):
        return vars(self)


class _reqSession:
    def __init__(self, r: dict):
        self.message_id: int = r['message_id']
        self.session_id: str = r['session_id']
        self.skill_id: str = r['skill_id']
        self.user_id: str = r['user_id']
        self.user = _sessionUser(r['user'])
        self.application = r['application']
        self.new: bool = r['new']

    def todict(self):
        a = {}
        for key, value in vars(self).items():
            if not isinstance(value, (str, int, bool, list, dict)):
                a[key] = value.todict()
            else:
                a[key] = value
        return a


class _request:
    def __init__(self, r: dict):
        self.type: str = r['type']
        self.nlu = _nlu(r['nlu'])
        self.command: str = r.get('command', None)
        self.original_utterance: str = r.get('original_utterance', None)
        self.markup: dict = r.get('markup', None)
        self.payload: dict = r.get('payload', None)

    def todict(self):
        a = {}
        for key, value in vars(self).items():
            if not isinstance(value, (str, int, bool, list, dict)):
                a[key] = value.todict()
            else:
                a[key] = value
        return a


class Req:
    def __init__(self, r: dict):
        self.meta = r['meta']
        self.request = _request(r['request'])
        self.session = _reqSession(r['session'])
        self.state: dict = r.get('state', None)
        self.version: str = r['version']


@app.route('/post', methods=['POST'])
def main():
    logging.info(f'Request: {request.json!r}')
    req = Req(request.json)
    response = {
        'session': req.session.todict(),
        'version': req.version,
        'response': {
            'end_session': False
        }
    }
    handle_dialog(req, response)

    logging.info(f'Response:  {response!r}')

    return jsonify(response)


def check_tokens(tokens, variation):
    for token in tokens:
        if token in VARIATIONS[variation]:
            return True
    return False


def handle_dialog(req: Req, res):
    user_id = req.session.user_id
    if req.session.new:
        sessionStorage[user_id] = User(user_id)
        send_greetings(res)
        return
    sessionStorage[user_id].requests += 1

    tokens = req.request.nlu.tokens
    print(sessionStorage[user_id].isNew, sessionStorage[user_id].inQuiz)

    if sessionStorage[user_id].isNew:
        if check_tokens(tokens, '–¥–∞'):
            res['response']['text'] = '–ù–∞—á–∏–Ω–∞—é —Å–ª—É—á–∞–π–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
            sessionStorage[user_id].inQuiz = True
            send_quizSuggests(res)
            return
        elif check_tokens(tokens, '–Ω–µ—Ç'):
            res['response']['text'] = '–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω'
            send_idleSuggests(res)
            return

    if sessionStorage[user_id].inQuiz:
        if check_tokens(tokens, '–≤—ã—Ö–æ–¥'):
            res['response']['text'] = '–•–æ—Ä–æ—à–æ, –≤—ã—Ö–æ–∂—É –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã'
            sessionStorage[user_id].inQuiz = False
            send_idleSuggests(res)
            return
        if check_tokens(tokens, '–ø–æ–≤—Ç–æ—Ä–∏'):
            res['response']['text'] = '–ü–æ–≤—Ç–æ—Ä—è—é –≤–æ–ø—Ä–æ—Å'
            send_quizSuggests(res)
            return

    if not sessionStorage[user_id].inQuiz:
        if sessionStorage[user_id].justFinished:
            if check_tokens(tokens, '–∑–∞–Ω–æ–≤–æ'):
                res['response']['text'] = '–ó–∞–ø—É—Å–∫–∞—é —ç—Ç—É –∂–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ'
                sessionStorage[user_id].justFinished = False
                sessionStorage[user_id].inQuiz = True
                send_idleSuggests(res)
                return
        if check_tokens(tokens, '—Ç–æ–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω'):
            res['response']['text'] = '–í—ã–≤–µ–ª–∞ —Ç–æ–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω'
            send_idleSuggests(res)
            return
        if check_tokens(tokens, '—Å–ª—É—á–∞–π–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'):
            res['response']['text'] = '–ù–∞—á–∏–Ω–∞—é —Å–ª—É—á–∞–π–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
            sessionStorage[user_id].inQuiz = True
            send_quizSuggests(res)
            return
        if check_tokens(tokens, '—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã'):
            res['response']['text'] = '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ. –£–¥–∞—á–∏ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!'
            send_idleSuggests(res)
            send_creationSuggest(res)
            return
        if check_tokens(tokens, '—É–º–µ–Ω–∏—è'):
            res['response']['text'] = "–Ø –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, \
–º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –ø—Ä–æ—Ö–æ–¥–∏–º—ã—Ö. –ê –µ—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª –ø—Ä–æ–π—Ç–∏, \
–º–æ–∂–µ—à—å —Å–∞–º –µ–µ —Å–æ–∑–¥–∞—Ç—å"
            send_idleSuggests(res)
            return
        if check_tokens(tokens, '–ø—Ä–∞–≤–∏–ª–∞'):
            res['response']['text'] = "–í–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —Ç—ã\
–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –û—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å, —Ç—ã —É–∑–Ω–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            send_idleSuggests(res)
            return

    sessionStorage[user_id].justFinished = False
    sessionStorage[user_id].isNew = False
    send_error(res)
    if sessionStorage[user_id].inQuiz:
        send_quizSuggests(res)
    else:
        send_idleSuggests(res)


def send_idleSuggests(res):
    res['response']['buttons'] = [
        {
            "title": "–¢–æ–ø‚ú®",
            "hide": True
        },
        # {
        #     "title": "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ...",
        #     "hide": True
        # },
        {
            "title": "–°–ª—É—á–∞–π–Ω–∞—èüé≤",
            "hide": True
        },
        {
            "title": "–°–æ–∑–¥–∞—Ç—åü§ñ",
            "hide": True
        },
        {
            "title": "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?ü§î",
            "hide": True
        },
        {
            "title": "–ü–æ–º–æ—â—åüò£",
            "hide": True
        }
    ]


def send_quizSuggests(res):
    res['response']['buttons'] = [
        {
            "title": "–í—ã—Ö–æ–¥",
            "hide": True
        },
        {
            "title": "–ü–æ–≤—Ç–æ—Ä–∏ –≤–æ–ø—Ä–æ—Å",
            "hide": True
        }
    ]


def send_creationSuggest(res):
    res['response']['buttons'] = res['response'].get('buttons', []) + [
        {
            "title": "–°–æ–∑–¥–∞—Ç—å",
            "url": "https://youtube.com",
            "hide": False
        }
    ]


def send_error(res):
    res['response']['text'] = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"


def send_greetings(res):
    res['response']['text'] = "–ü—Ä–∏–≤–µ—Ç! –Ø —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –ØQuiz. –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∏ –∫–∞–∂–¥–æ–≥–æ. –ù–∞—á–Ω–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?"
    res['response']['tts'] = "–ü—Ä–∏–≤–µ—Ç! –Ø —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –ØQuiz. –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∏ –∫–∞–∂–¥–æ–≥–æ. –ù–∞—á–Ω–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?"
    res['response']['buttons'] = [
        {
            "title": "–î–∞, –¥–∞–≤–∞–π",
            "payload": {},
            "hide": True
        },
        {
            "title": "–ù–µ—Ç",
            "payload": {},
            "hide": True
        }
    ]


if __name__ == '__main__':
    app.run()
